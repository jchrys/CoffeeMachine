type: edu
custom_name: stage6
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    public class CoffeeMachine {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/Stock.java
  visible: true
  text: |
    package machine;

    public class Stock {
        private int water;
        private int milk;
        private int bean;
        private int cup;
        private int money;

        public static Stock getDefault() {
            return new Stock(400, 540, 120, 9, 550);
        }

        public Stock(int water, int milk, int bean, int cup, int money) {
            this.water = water;
            this.milk = milk;
            this.bean = bean;
            this.cup = cup;
            this.money = money;
        }

        public void fill(int water, int milk, int bean, int cup) {
            this.water += water;
            this.milk += milk;
            this.bean += bean;
            this.cup += cup;
        }

        public int takeMoney() {
            int money = this.money;
            this.money = 0;
            return money;
        }

        public void cook(CoffeeMenu coffeeMenu) {
            if (!isCookable(coffeeMenu)) {
                return;
            }
            System.out.println("I have enough resources, making you a coffee!");
            this.water -= coffeeMenu.getRecipe().getWater();
            this.milk -= coffeeMenu.getRecipe().getMilk();
            this.bean -= coffeeMenu.getRecipe().getBean();
            this.cup--;
            this.money += coffeeMenu.getMoney();
        }

        private boolean isCookable(CoffeeMenu coffeeMenu) {
            if (coffeeMenu.getRecipe().getWater() > water) {
                System.out.println("Sorry, not enough water!");
                return false;
            } else if (coffeeMenu.getRecipe().getMilk() > milk) {
                System.out.println("Sorry, not enough milk!");
                return false;
            } else if (coffeeMenu.getRecipe().getBean() > bean) {
                System.out.println("Sorry, not enough bean!");
                return false;
            } else if (1 > cup) {
                System.out.println("Sorry, not enough cup!");
                return false;
            }
            return true;
        }

        public void printState() {
            System.out.println("The coffee machine has:");
            System.out.printf("%d of water\n", water);
            System.out.printf("%d of milk\n", milk);
            System.out.printf("%d of coffee beans\n", bean);
            System.out.printf("%d of disposable cups\n", cup);
            System.out.printf("$%d of money\n", money);
        }
    }
  learner_created: true
- name: src/machine/CoffeeMenu.java
  visible: true
  text: |
    package machine;

    import java.util.Arrays;

    public enum CoffeeMenu {
        BACK(0, new Recipe(0, 0, 0), 0),
        ESPRESSO(1, new Recipe(250, 0, 16), 4),
        LATTE(2, new Recipe(350, 75, 20), 7),
        CAPPUCINO(3, new Recipe(200, 100, 12), 6),
        UNKNOWN(-1, null, -1);

        private int number;
        private Recipe recipe;
        private int money;

        CoffeeMenu(int number, Recipe recipe, int money) {
            this.number = number;
            this.recipe = recipe;
            this.money = money;
        }

        public int getNumber() {
            return number;
        }

        public Recipe getRecipe() {
            return recipe;
        }

        public int getMoney() {
            return money;
        }

        public static CoffeeMenu findByNumber(int number) {
            return Arrays.stream(values())
                    .filter(menu -> menu.getNumber() == number)
                    .findFirst()
                    .orElse(UNKNOWN);
        }
    }
  learner_created: true
- name: src/machine/NewCoffeeMachine.java
  visible: true
  learner_created: true
- name: src/machine/StringUtils.java
  visible: true
  learner_created: true
- name: src/machine/handler/Handler.java
  visible: true
  learner_created: true
- name: src/machine/handler/HandlerResult.java
  visible: true
  learner_created: true
- name: src/machine/handler/RemainingHandler.java
  visible: true
  learner_created: true
- name: src/machine/handler/SelectActionHandler.java
  visible: true
  learner_created: true
- name: src/machine/handler/HandlerHolder.java
  visible: true
  learner_created: true
- name: src/machine/handler/BootStrapHandler.java
  visible: true
  learner_created: true
- name: src/machine/handler/BuyHandler.java
  visible: true
  learner_created: true
- name: src/machine/handler/TakeHandler.java
  visible: true
  learner_created: true
- name: src/machine/handler/FillHandler.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/180/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 14 Feb 2021 03:47:11 UTC
record: -1
